package no.uib.inf252.katscan.view.component.dataset;

import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.SwingUtilities;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import no.uib.inf252.katscan.data.LoadedDataHolder;
import no.uib.inf252.katscan.event.DataHolderListener;
import no.uib.inf252.katscan.persistence.DataFile;
import no.uib.inf252.katscan.persistence.Project;

/**
 *
 * @author Marcelo Lima
 */
public class DatasetBrowser extends javax.swing.JPanel implements MouseListener, DataHolderListener {

    private Project project;
    
    /** Creates new form DatasetBrowser */
    public DatasetBrowser() {
        initComponents();
        project = new Project();
        DatasetBrowserRenderer renderer = new DatasetBrowserRenderer();
        treDatasets.setCellRenderer(renderer);
        treDatasets.setShowsRootHandles(false);
        treDatasets.setModel(new DefaultTreeModel(project));
        treDatasets.addMouseListener(this);
        
        LoadedDataHolder.getInstance().addDataHolderListener(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMain = new javax.swing.JPanel();
        scrDatasets = new javax.swing.JScrollPane();
        treDatasets = new javax.swing.JTree();

        setLayout(new java.awt.BorderLayout());

        scrDatasets.setViewportView(treDatasets);

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrDatasets, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrDatasets, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                .addContainerGap())
        );

        add(pnlMain, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel pnlMain;
    private javax.swing.JScrollPane scrDatasets;
    private javax.swing.JTree treDatasets;
    // End of variables declaration//GEN-END:variables

    @Override
    public void mouseClicked(MouseEvent e) {
        if (SwingUtilities.isRightMouseButton(e)) {
            TreePath path = treDatasets.getPathForLocation(e.getX(), e.getY());
            if (path == null) {
                return;
            }
            
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) path.getLastPathComponent();
            if (node instanceof Project) {
                DatasetBrowserPopups.getInstance().getProjectPopup().show(e.getComponent(), e.getX(), e.getY());
            }
        }
    }

    @Override
    public void mousePressed(MouseEvent e) {
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }

    @Override
    public void dataAdded(String name, String file) {
        project.add(new DataFile(name, file));
        treDatasets.expandRow(0);
    }

    @Override
    public void dataRemoved(String name) {
        for (int i = 0; i < project.getChildCount(); i++) {
            DataFile node = (DataFile) project.getChildAt(i);
            if (node.equals(name)) {
                DefaultTreeModel model = (DefaultTreeModel) treDatasets.getModel();
                model.removeNodeFromParent(node);
                return;
            }
        }
    }

}
